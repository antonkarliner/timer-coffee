import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    vendors,
    supportedLocales,
    brewingMethods,
    recipes,
    recipeLocalizations,
    steps,
    userRecipePreferences,
    coffeeFacts,
    startPopups,
  ];
  late final Shape0 vendors = Shape0(
      source: i0.VersionedTable(
        entityName: 'vendors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(vendor_id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 supportedLocales = Shape1(
      source: i0.VersionedTable(
        entityName: 'supported_locales',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(locale)',
        ],
        columns: [
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 brewingMethods = Shape2(
      source: i0.VersionedTable(
        entityName: 'brewing_methods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(brewing_method_id)',
        ],
        columns: [
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recipes = Shape3(
      source: i0.VersionedTable(
        entityName: 'recipes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 recipeLocalizations = Shape4(
      source: i0.VersionedTable(
        entityName: 'recipe_localizations',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 steps = Shape5(
      source: i0.VersionedTable(
        entityName: 'steps',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_17,
          _column_22,
          _column_23,
          _column_24,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 userRecipePreferences = Shape6(
      source: i0.VersionedTable(
        entityName: 'user_recipe_preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(recipe_id)',
        ],
        columns: [
          _column_17,
          _column_25,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 coffeeFacts = Shape7(
      source: i0.VersionedTable(
        entityName: 'coffee_facts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_31,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 startPopups = Shape8(
      source: i0.VersionedTable(
        entityName: 'start_popups',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_32,
          _column_33,
          _column_34,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get vendorId =>
      columnsByName['vendor_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get vendorName =>
      columnsByName['vendor_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get vendorDescription =>
      columnsByName['vendor_description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get bannerUrl =>
      columnsByName['banner_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get active =>
      columnsByName['active']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('vendor_id', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('vendor_name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('vendor_description', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('banner_url', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_4(String aliasedName) =>
    i1.GeneratedColumn<bool>('active', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("active" IN (0, 1))'));

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get locale =>
      columnsByName['locale']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get localeName =>
      columnsByName['locale_name']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('locale', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('locale_name', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get brewingMethodId =>
      columnsByName['brewing_method_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get brewingMethod =>
      columnsByName['brewing_method']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('brewing_method_id', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('brewing_method', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get brewingMethodId =>
      columnsByName['brewing_method_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get coffeeAmount =>
      columnsByName['coffee_amount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get waterAmount =>
      columnsByName['water_amount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get waterTemp =>
      columnsByName['water_temp']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get brewTime =>
      columnsByName['brew_time']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get vendorId =>
      columnsByName['vendor_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastModified =>
      columnsByName['last_modified']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('brewing_method_id', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string,
        $customConstraints:
            'REFERENCES brewing_methods(brewing_method_id) NOT NULL');
i1.GeneratedColumn<double> _column_11(String aliasedName) =>
    i1.GeneratedColumn<double>('coffee_amount', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_12(String aliasedName) =>
    i1.GeneratedColumn<double>('water_amount', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_13(String aliasedName) =>
    i1.GeneratedColumn<double>('water_temp', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('brew_time', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('vendor_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        $customConstraints: 'REFERENCES vendors(vendor_id)');
i1.GeneratedColumn<DateTime> _column_16(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_modified', aliasedName, true,
        type: i1.DriftSqlType.dateTime);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get recipeId =>
      columnsByName['recipe_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get locale =>
      columnsByName['locale']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get grindSize =>
      columnsByName['grind_size']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get shortDescription =>
      columnsByName['short_description']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('recipe_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        $customConstraints: 'REFERENCES recipes(id) NOT NULL');
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('locale', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 2, maxTextLength: 10),
        type: i1.DriftSqlType.string,
        $customConstraints: 'REFERENCES supported_locales(locale) NOT NULL');
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('grind_size', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 1, maxTextLength: 255),
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('short_description', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get recipeId =>
      columnsByName['recipe_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get stepOrder =>
      columnsByName['step_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get time =>
      columnsByName['time']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get locale =>
      columnsByName['locale']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_22(String aliasedName) =>
    i1.GeneratedColumn<int>('step_order', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('description', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('time', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get recipeId =>
      columnsByName['recipe_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastUsed =>
      columnsByName['last_used']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get isFavorite =>
      columnsByName['is_favorite']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get sweetnessSliderPosition =>
      columnsByName['sweetness_slider_position']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get strengthSliderPosition =>
      columnsByName['strength_slider_position']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get customCoffeeAmount =>
      columnsByName['custom_coffee_amount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get customWaterAmount =>
      columnsByName['custom_water_amount']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<DateTime> _column_25(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_used', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<bool> _column_26(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_favorite', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_favorite" IN (0, 1))'));
i1.GeneratedColumn<int> _column_27(String aliasedName) =>
    i1.GeneratedColumn<int>('sweetness_slider_position', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(1));
i1.GeneratedColumn<int> _column_28(String aliasedName) =>
    i1.GeneratedColumn<int>('strength_slider_position', aliasedName, false,
        type: i1.DriftSqlType.int, defaultValue: const Constant(2));
i1.GeneratedColumn<double> _column_29(String aliasedName) =>
    i1.GeneratedColumn<double>('custom_coffee_amount', aliasedName, true,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_30(String aliasedName) =>
    i1.GeneratedColumn<double>('custom_water_amount', aliasedName, true,
        type: i1.DriftSqlType.double);

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fact =>
      columnsByName['fact']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get locale =>
      columnsByName['locale']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>('fact', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get appVersion =>
      columnsByName['app_version']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get locale =>
      columnsByName['locale']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_32(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>('app_version', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_34(String aliasedName) =>
    i1.GeneratedColumn<String>('locale', aliasedName, false,
        type: i1.DriftSqlType.string,
        $customConstraints: 'REFERENCES supported_locales(locale) NOT NULL');

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    vendors,
    supportedLocales,
    brewingMethods,
    recipes,
    recipeLocalizations,
    steps,
    userRecipePreferences,
    coffeeFacts,
    startPopups,
    idxRecipesLastModified,
  ];
  late final Shape0 vendors = Shape0(
      source: i0.VersionedTable(
        entityName: 'vendors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(vendor_id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 supportedLocales = Shape1(
      source: i0.VersionedTable(
        entityName: 'supported_locales',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(locale)',
        ],
        columns: [
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 brewingMethods = Shape2(
      source: i0.VersionedTable(
        entityName: 'brewing_methods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(brewing_method_id)',
        ],
        columns: [
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recipes = Shape3(
      source: i0.VersionedTable(
        entityName: 'recipes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 recipeLocalizations = Shape4(
      source: i0.VersionedTable(
        entityName: 'recipe_localizations',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 steps = Shape5(
      source: i0.VersionedTable(
        entityName: 'steps',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_17,
          _column_22,
          _column_23,
          _column_24,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 userRecipePreferences = Shape6(
      source: i0.VersionedTable(
        entityName: 'user_recipe_preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(recipe_id)',
        ],
        columns: [
          _column_17,
          _column_25,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 coffeeFacts = Shape7(
      source: i0.VersionedTable(
        entityName: 'coffee_facts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_31,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 startPopups = Shape8(
      source: i0.VersionedTable(
        entityName: 'start_popups',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_32,
          _column_33,
          _column_34,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index idxRecipesLastModified = i1.Index('idx_recipes_last_modified',
      'CREATE INDEX idx_recipes_last_modified ON recipes (last_modified)');
}

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    vendors,
    supportedLocales,
    brewingMethods,
    recipes,
    recipeLocalizations,
    steps,
    userRecipePreferences,
    coffeeFacts,
    startPopups,
    contributors,
    idxRecipesLastModified,
  ];
  late final Shape0 vendors = Shape0(
      source: i0.VersionedTable(
        entityName: 'vendors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(vendor_id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 supportedLocales = Shape1(
      source: i0.VersionedTable(
        entityName: 'supported_locales',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(locale)',
        ],
        columns: [
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 brewingMethods = Shape9(
      source: i0.VersionedTable(
        entityName: 'brewing_methods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(brewing_method_id)',
        ],
        columns: [
          _column_7,
          _column_8,
          _column_35,
          _column_36,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recipes = Shape3(
      source: i0.VersionedTable(
        entityName: 'recipes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 recipeLocalizations = Shape4(
      source: i0.VersionedTable(
        entityName: 'recipe_localizations',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 steps = Shape5(
      source: i0.VersionedTable(
        entityName: 'steps',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_17,
          _column_22,
          _column_23,
          _column_24,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 userRecipePreferences = Shape6(
      source: i0.VersionedTable(
        entityName: 'user_recipe_preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(recipe_id)',
        ],
        columns: [
          _column_17,
          _column_25,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 coffeeFacts = Shape7(
      source: i0.VersionedTable(
        entityName: 'coffee_facts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_31,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 startPopups = Shape8(
      source: i0.VersionedTable(
        entityName: 'start_popups',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_32,
          _column_33,
          _column_34,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 contributors = Shape10(
      source: i0.VersionedTable(
        entityName: 'contributors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_32,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index idxRecipesLastModified = i1.Index('idx_recipes_last_modified',
      'CREATE INDEX idx_recipes_last_modified ON recipes (last_modified)');
}

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get brewingMethodId =>
      columnsByName['brewing_method_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get brewingMethod =>
      columnsByName['brewing_method']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get showOnMain =>
      columnsByName['show_on_main']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get icon =>
      columnsByName['icon']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<bool> _column_35(String aliasedName) =>
    i1.GeneratedColumn<bool>('show_on_main', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("show_on_main" IN (0, 1))'),
        defaultValue: const Constant(false));
i1.GeneratedColumn<String> _column_36(String aliasedName) =>
    i1.GeneratedColumn<String>('icon', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape10 extends i0.VersionedTable {
  Shape10({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get locale =>
      columnsByName['locale']! as i1.GeneratedColumn<String>;
}

final class Schema5 extends i0.VersionedSchema {
  Schema5({required super.database}) : super(version: 5);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    vendors,
    supportedLocales,
    brewingMethods,
    recipes,
    recipeLocalizations,
    steps,
    userRecipePreferences,
    coffeeFacts,
    startPopups,
    contributors,
    userStats,
    idxRecipesLastModified,
  ];
  late final Shape0 vendors = Shape0(
      source: i0.VersionedTable(
        entityName: 'vendors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(vendor_id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 supportedLocales = Shape1(
      source: i0.VersionedTable(
        entityName: 'supported_locales',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(locale)',
        ],
        columns: [
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape11 brewingMethods = Shape11(
      source: i0.VersionedTable(
        entityName: 'brewing_methods',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(brewing_method_id)',
        ],
        columns: [
          _column_7,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recipes = Shape3(
      source: i0.VersionedTable(
        entityName: 'recipes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_37,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
          _column_38,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 recipeLocalizations = Shape4(
      source: i0.VersionedTable(
        entityName: 'recipe_localizations',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_39,
          _column_40,
          _column_19,
          _column_20,
          _column_21,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 steps = Shape5(
      source: i0.VersionedTable(
        entityName: 'steps',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_39,
          _column_22,
          _column_23,
          _column_24,
          _column_40,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 userRecipePreferences = Shape6(
      source: i0.VersionedTable(
        entityName: 'user_recipe_preferences',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(recipe_id)',
        ],
        columns: [
          _column_39,
          _column_25,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 coffeeFacts = Shape7(
      source: i0.VersionedTable(
        entityName: 'coffee_facts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_31,
          _column_40,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 startPopups = Shape8(
      source: i0.VersionedTable(
        entityName: 'start_popups',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_32,
          _column_33,
          _column_41,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape10 contributors = Shape10(
      source: i0.VersionedTable(
        entityName: 'contributors',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_9,
          _column_32,
          _column_40,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape12 userStats = Shape12(
      source: i0.VersionedTable(
        entityName: 'user_stats',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_42,
          _column_43,
          _column_44,
          _column_11,
          _column_12,
          _column_45,
          _column_46,
          _column_47,
          _column_48,
          _column_49,
          _column_50,
          _column_51,
          _column_52,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index idxRecipesLastModified = i1.Index('idx_recipes_last_modified',
      'CREATE INDEX idx_recipes_last_modified ON recipes (last_modified)');
}

class Shape11 extends i0.VersionedTable {
  Shape11({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get brewingMethodId =>
      columnsByName['brewing_method_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get brewingMethod =>
      columnsByName['brewing_method']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get showOnMain =>
      columnsByName['show_on_main']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_37(String aliasedName) => i1.GeneratedColumn<
        String>('brewing_method_id', aliasedName, false,
    additionalChecks: i1.GeneratedColumn.checkTextLength(
        minTextLength: 1, maxTextLength: 255),
    type: i1.DriftSqlType.string,
    defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES brewing_methods (brewing_method_id) ON DELETE CASCADE'));
i1.GeneratedColumn<String> _column_38(String aliasedName) =>
    i1.GeneratedColumn<String>('vendor_id', aliasedName, true,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES vendors (vendor_id) ON DELETE SET NULL'));
i1.GeneratedColumn<String> _column_39(String aliasedName) =>
    i1.GeneratedColumn<String>('recipe_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES recipes (id) ON DELETE CASCADE'));
i1.GeneratedColumn<String> _column_40(String aliasedName) =>
    i1.GeneratedColumn<String>('locale', aliasedName, false,
        additionalChecks: i1.GeneratedColumn.checkTextLength(
            minTextLength: 2, maxTextLength: 10),
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES supported_locales (locale) ON DELETE CASCADE'));
i1.GeneratedColumn<String> _column_41(String aliasedName) =>
    i1.GeneratedColumn<String>('locale', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES supported_locales (locale) ON DELETE CASCADE'));

class Shape12 extends i0.VersionedTable {
  Shape12({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get userId =>
      columnsByName['user_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get recipeId =>
      columnsByName['recipe_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get coffeeAmount =>
      columnsByName['coffee_amount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get waterAmount =>
      columnsByName['water_amount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get sweetnessSliderPosition =>
      columnsByName['sweetness_slider_position']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get strengthSliderPosition =>
      columnsByName['strength_slider_position']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get brewingMethodId =>
      columnsByName['brewing_method_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get beans =>
      columnsByName['beans']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get roaster =>
      columnsByName['roaster']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get rating =>
      columnsByName['rating']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_42(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_43(String aliasedName) =>
    i1.GeneratedColumn<String>('user_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_44(String aliasedName) =>
    i1.GeneratedColumn<String>('recipe_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES recipes (id)'));
i1.GeneratedColumn<int> _column_45(String aliasedName) =>
    i1.GeneratedColumn<int>('sweetness_slider_position', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_46(String aliasedName) =>
    i1.GeneratedColumn<int>('strength_slider_position', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_47(String aliasedName) =>
    i1.GeneratedColumn<String>('brewing_method_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES brewing_methods (brewing_method_id)'));
i1.GeneratedColumn<DateTime> _column_48(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, false,
        type: i1.DriftSqlType.dateTime, defaultValue: currentDateAndTime);
i1.GeneratedColumn<String> _column_49(String aliasedName) =>
    i1.GeneratedColumn<String>('notes', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_50(String aliasedName) =>
    i1.GeneratedColumn<String>('beans', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_51(String aliasedName) =>
    i1.GeneratedColumn<String>('roaster', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_52(String aliasedName) =>
    i1.GeneratedColumn<int>('rating', aliasedName, true,
        type: i1.DriftSqlType.int);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      case 4:
        final schema = Schema5(database: database);
        final migrator = i1.Migrator(database, schema);
        await from4To5(migrator, schema);
        return 5;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
      from2To3: from2To3,
      from3To4: from3To4,
      from4To5: from4To5,
    ));
